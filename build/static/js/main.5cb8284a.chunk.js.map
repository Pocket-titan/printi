{"version":3,"sources":["assets/printi_logo_transparent.svg","components/Home.jsx","components/Printer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Component","Printer","printer","this","props","match","params","Fragment","id","style","width","overflow","margin","height","paddingTop","paddingBottom","alignContent","textAlign","position","src","logo","alt","title","left","bottom","concat","action","method","enctype","target","type","name","accept","href","display","App","BrowserRouter","Switch","Route","exact","path","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","scope","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5cb8284a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/printi_logo_transparent.8c0d89d7.svg\";","import React, { Component } from 'react'\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <span>\n          hello\n        </span>\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport logo from '../assets/printi_logo_transparent.svg'\n\nclass Printer extends Component {\n  render() {\n    const { match: { params: { printer } } } = this.props\n    return (\n      <>\n        <div\n          id=\"titlecontainer\"\n          style={{\n            width: '100%',\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            style={{\n              margin: '0 auto',\n              width: 250,\n              height: 80,\n              paddingTop: 30,\n              paddingBottom: 20,\n              alignContent: 'center',\n              textAlign: 'center',\n            }}\n          >\n            <div style={{ position: 'relative' }}>\n              <div\n                style={{\n                  position: 'absolute',\n                  width: '100%',\n                }}\n              >\n                <h1>\n                  <img\n                    src={logo}\n                    width={100}\n                    height={34}\n                    alt=\"printi\"\n                    title=\"printi\"\n                  />\n                </h1>\n              </div>\n              <div\n                style={{\n                  position: 'absolute',\n                  left: 180,\n                  bottom: -76,\n                }}\n                id=\"printername\"\n              >\n                <h1>\n                  {`/${printer}`}\n                </h1>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div\n          style={{\n            margin: '0 auto',\n            width: 250,\n            alignContent: 'center',\n            textAlign: 'center',\n            }}\n          >\n          <div id=\"receiptcontainer\">\n            <div id=\"receipt\">\n              <div id=\"preview\">\n                <img id=\"previewimg\" src=\"#\" width={250} alt=\"preview\"/>\n                <div id=\"curtain\"></div>\n              </div>\n              <div id=\"formcontainer\">\n                <form id=\"leform\" action=\"\" method=\"post\" enctype=\"multipart/form-data\" target=\"responseframe\">\n                  <input\n                    id=\"filepicker\"\n                    type=\"file\"\n                    name=\"theshiz\"\n                    accept=\"image/*\"\n                  />\n                </form>\n              </div>\n            </div>\n          </div>\n          <div id=\"explain\">\n            <a href=\"https://github.com/fons-/printi/blob/master/README.md\">\n              What is printi?\n            </a>\n          </div>\n          <span id=\"logje\"></span>\n          <iframe\n            name=\"responseframe\"\n            title=\"response\"\n            style={{ display: 'none' }}\n          >\n          </iframe>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default Printer\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Home from './components/Home'\nimport Printer from './components/Printer'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/:printer\" component={Printer} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl, {\n      scope: '/'\n    })\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}